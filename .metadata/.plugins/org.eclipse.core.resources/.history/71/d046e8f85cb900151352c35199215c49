package app.receiver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.mortbay.jetty.Request;
import org.mortbay.jetty.handler.AbstractHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import app.components.Admin;
import app.components.LoadingStationThings;
import app.components.StallThings;
import app.entity.Student;

import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;



@Component
class URLHandler extends AbstractHandler {

	@Autowired
	private LoadingStationThings loadingStation;
	
	@Autowired
	private StallThings stally;
	
	@Autowired
	private Admin admeen;
	

	public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch)
			throws IOException, ServletException {

		
		System.out.println("=============================================================================");
		
		System.out.println("Target: "+target);
		System.out.println("URL : "+request.getRequestURL().toString());
		System.out.println("RequestType : "+request.getMethod());
		
		if (request.getMethod().equals("POST"))
		{
			try {
				if (target.equalsIgnoreCase("/load")) {
					HashMap<String, String> map = convertJsonToCommand(request);

					String idNum = map.get("idNumber");
					double cred = Double.parseDouble(map.get("credit"));
					
					if (cred == 0){
						response.getWriter().println("Enter amount.");
					}
					else{
						loadingStation.load(idNum, cred, "LS Cashier");
						response.getWriter().println("You have succesfully loaded P" + cred + " to " + idNum + ".");
					
					}
				}	
				
				else if (target.equalsIgnoreCase("/addStudent")) {
					HashMap<String, String> map = convertJsonToCommand(request);

					String idn = map.get("idNumber");
					String neym = map.get("name");
					double cr = Double.parseDouble(map.get("credit"));
					String cp = map.get("cellphone");
					
					if(!admeen.checkStudent(idn)){
						admeen.regStudent(neym, idn, cr, cp);
						response.getWriter().println("You have succesfully registered " + neym + ". Current Balance: P" + loadingStation.getAcctBalance(idn));
					
						String msg = "Thank you for joining Meal eWallet. Your current balance is P" + loadingStation.getAcctBalance(idn) + ".";
						SendTester st = new SendTester();
						
						st.sendMensahe(cp, msg);
					}
					else if(admeen.checkStudent(idn)){

						response.getWriter().println("Invalid input.");
					}		
				}	
				else if (target.equalsIgnoreCase("/addOwner")) {
					HashMap<String, String> map = convertJsonToCommand(request);

					String neym = map.get("ownerName");
					String cp = map.get("ownerCellphone");
					String sn = map.get("stallName");
					
					if(!admeen.checkOwner(neym)){
						admeen.regOwner(neym, cp, sn);
						response.getWriter().println("You have succesfully registered " + neym + " as owner of " + sn + ".");
						
						String msg = "Thank you for joining Meal eWallet. You are now a registered owner of " + sn + ".";
						SendTester st = new SendTester();
						
						st.sendMensahe(cp, msg);
					}
					else if(admeen.checkOwner(neym)){

						response.getWriter().println("Invalid input.");
					}		
				}	

				else if (target.equalsIgnoreCase("/addStall")) {
					HashMap<String, String> map = convertJsonToCommand(request);

					String sn = map.get("stallName");
					
					if(!admeen.checkStall(sn)){
						admeen.createStall(sn);
						response.getWriter().println(sn + " is now a registered stall.");
						
					}
					else if(admeen.checkStall(sn)){

						response.getWriter().println("Invalid input.");
					}		
				}	
				else if (target.equalsIgnoreCase("/purchase")) {
					purchasy(request, response);			
				}
				
				else if (target.equalsIgnoreCase("/showProfit")) {
					showProfit(request, response);	
				}
				
				else {
					// invalid request
					response.getWriter().println("Unsupported POST request: " + target);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else
		{
		    //invalid request
			response.getWriter().println("Unsupported GET request: " + target);			
		}
		((Request) request).setHandled(true);
	}
	
	
	@Transactional
	private void purchasy(HttpServletRequest request, HttpServletResponse response)
			throws IOException {
			HashMap<String, String> map = convertJsonToCommand(request);

			String id = map.get("idNumber");
			double amt = Double.parseDouble(map.get("amount"));
		    String sta = map.get("stallName");
		    String deyt = map.get("entryDate");
			
			if(admeen.checkStudent(id) && admeen.checkStall(sta)){
				stally.purchy(id, amt, sta);
				response.getWriter().println("A purchase has been made by " + id + " from " + sta + ".");
		
				String msg = "Thank you for purchasing from " + sta + ". Your current balance is P" + loadingStation.getAcctBalance(id) +".";
				SendTester st = new SendTester();
				
				st.sendMensahe(admeen.getStudCellNo(id), msg);
			
			}
			else if(!admeen.checkStudent(id) && !admeen.checkStall(sta)){

				response.getWriter().println("Invalid input.");
			}		
				
	}
	
	@Transactional
	private void showProfit(HttpServletRequest request, HttpServletResponse response)
			throws IOException {
			HashMap<String, String> map = convertJsonToCommand(request);
			
			String sn = map.get("stallName");
		    String on = map.get("ownerName");
		    
		    if(admeen.checkStall(sn) && admeen.checkOwner(on)){
				response.getWriter().println("The profit of " + sn + " for today is P" + stally.getCurrentProfit(sn) + ".");
				
				String msg = "The profit of " + sn + " is P" + stally.getCurrentProfit(sn) + ".";
				SendTester st = new SendTester();
				
				st.sendMensahe(admeen.getOwnerCellNo(on), msg);
		    }
		    else{
				response.getWriter().println("Invalid input.");
			}
	}
	

	
	public static String readStreamAsString(InputStream is) throws IOException {
		InputStreamReader isr = new InputStreamReader(is);

		BufferedReader reader = new BufferedReader(isr);
		StringBuilder sb = new StringBuilder();
		String line = null;
		while ((line = reader.readLine()) != null) {
			sb.append(line + "\n");
		}

		return sb.toString();
	}
	
	
	private HashMap<String, String> convertJsonToCommand(HttpServletRequest request) {
		try {
			String rawJson = null;

			// extract any sent data
			rawJson = readStreamAsString(request.getInputStream());
			System.out.println("RAW COMMAND JSON: " + rawJson);

			ObjectMapper mapper = new ObjectMapper();
			//mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);
			HashMap<String, String> requestData = (HashMap) mapper.readValue(rawJson, HashMap.class);
			
			return requestData;
		} 
		catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}

